(ns com.sixsq.slipstream.ssclj.middleware.cimi-params-test
  (:require
    [com.sixsq.slipstream.ssclj.middleware.cimi-params :refer :all]
    [expectations :refer :all]))

(expect [] (as-vector nil))
(expect [1] (as-vector 1))
(expect ["a"] (as-vector "a"))
(expect [1 2] (as-vector '(1 2)))
(expect [1 2] (as-vector [1 2]))
(expect [1 "a"] (as-vector '(1 "a")))

(expect nil (as-long [1]))
(expect nil (as-long {:a 1}))
(expect nil (as-long #{1}))
(expect 1 (as-long 1))
(expect -1 (as-long -1))
(expect nil (as-long 2.5))
(expect nil (as-long 10/3))
(expect 1 (as-long "1"))
(expect -1 (as-long "-1"))
(expect nil (as-long "2.5"))
(expect nil (as-long "10/3"))

(expect nil (first-valid-long []))
(expect nil (first-valid-long ["a"]))
(expect nil (first-valid-long ["a" "b"]))
(expect 1 (first-valid-long [1]))
(expect 1 (first-valid-long ["1"]))
(expect 1 (first-valid-long ["a" 1]))
(expect 1 (first-valid-long ["a" 1 2]))
(expect 1 (first-valid-long [1 2]))
(expect 1 (first-valid-long ["a" 1 "c"]))
(expect -1 (first-valid-long [-1]))
(expect -1 (first-valid-long ["a" "-1" "c"]))
(expect nil (first-valid-long [nil nil]))
(expect nil (first-valid-long [{:a 1} [2]]))

(expect nil (get-index {"k" nil} "k"))
(expect nil (get-index {} "k"))
(expect 1 (get-index {"k" "1"} "k"))
(expect 1 (get-index {"k" 1} "k"))
(expect 1 (get-index {"k" ["a" 1]} "k"))
(expect 1 (get-index {"k" ["1" "2"]} "k"))

(expect {:first 1 :last 2} (:cimi-params (process-first-last {:params {"$first" 1, "$last" 2}})))
(expect {:first 1 :last 2} (:cimi-params (process-first-last {:params {"$first" "1", "$last" "2"}})))
(expect {:first 1 :last 2} (:cimi-params (process-first-last {:params {"$first" ["a" "1"], "$last" ["b" "2"]}})))
(expect {:first nil :last nil} (:cimi-params (process-first-last {:params {"$first" ["a"], "$last" nil}})))
(expect {:first nil :last nil} (:cimi-params (process-first-last {:params {}})))
(expect {:cimi-params {:first nil :last nil} :params {}} (process-first-last {:params {}}))

(expect "application/json" (:format (:cimi-params (process-format {:params {"$format" "json"}}))))
(expect "application/json" (:format (:cimi-params (process-format {:params {"$format" "JSON"}}))))
(expect "application/json" (:format (:cimi-params (process-format {:params {"$format" " JSON "}}))))
(expect "application/xml" (:format (:cimi-params (process-format {:params {"$format" "xml"}}))))
(expect "application/xml" (:format (:cimi-params (process-format {:params {"$format" "XML"}}))))
(expect "application/xml" (:format (:cimi-params (process-format {:params {"$format" " XML "}}))))
(expect "application/edn" (:format (:cimi-params (process-format {:params {"$format" "edn"}}))))
(expect "application/edn" (:format (:cimi-params (process-format {:params {"$format" "EDN"}}))))
(expect "application/edn" (:format (:cimi-params (process-format {:params {"$format" " EDN "}}))))
(expect nil (:format (:cimi-params (process-format {:params {"$format" "unknown"}}))))

(expect "application/json" (:format (:cimi-params (process-format {:params {"$format" ["json" "xml"]}}))))
(expect "application/json" (:format (:cimi-params (process-format {:params {"$format" ["unknown" "json" "xml"]}}))))

